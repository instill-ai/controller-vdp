// Code generated by MockGen. DO NOT EDIT.
// Source: go.etcd.io/etcd/client/v3 (interfaces: Auth)

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clientv3 "go.etcd.io/etcd/client/v3"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// AuthDisable mocks base method.
func (m *MockAuth) AuthDisable(arg0 context.Context) (*clientv3.AuthDisableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthDisable", arg0)
	ret0, _ := ret[0].(*clientv3.AuthDisableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthDisable indicates an expected call of AuthDisable.
func (mr *MockAuthMockRecorder) AuthDisable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthDisable", reflect.TypeOf((*MockAuth)(nil).AuthDisable), arg0)
}

// AuthEnable mocks base method.
func (m *MockAuth) AuthEnable(arg0 context.Context) (*clientv3.AuthEnableResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthEnable", arg0)
	ret0, _ := ret[0].(*clientv3.AuthEnableResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthEnable indicates an expected call of AuthEnable.
func (mr *MockAuthMockRecorder) AuthEnable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthEnable", reflect.TypeOf((*MockAuth)(nil).AuthEnable), arg0)
}

// AuthStatus mocks base method.
func (m *MockAuth) AuthStatus(arg0 context.Context) (*clientv3.AuthStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthStatus", arg0)
	ret0, _ := ret[0].(*clientv3.AuthStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthStatus indicates an expected call of AuthStatus.
func (mr *MockAuthMockRecorder) AuthStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthStatus", reflect.TypeOf((*MockAuth)(nil).AuthStatus), arg0)
}

// Authenticate mocks base method.
func (m *MockAuth) Authenticate(arg0 context.Context, arg1, arg2 string) (*clientv3.AuthenticateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*clientv3.AuthenticateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthMockRecorder) Authenticate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuth)(nil).Authenticate), arg0, arg1, arg2)
}

// RoleAdd mocks base method.
func (m *MockAuth) RoleAdd(arg0 context.Context, arg1 string) (*clientv3.AuthRoleAddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleAdd", arg0, arg1)
	ret0, _ := ret[0].(*clientv3.AuthRoleAddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleAdd indicates an expected call of RoleAdd.
func (mr *MockAuthMockRecorder) RoleAdd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleAdd", reflect.TypeOf((*MockAuth)(nil).RoleAdd), arg0, arg1)
}

// RoleDelete mocks base method.
func (m *MockAuth) RoleDelete(arg0 context.Context, arg1 string) (*clientv3.AuthRoleDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleDelete", arg0, arg1)
	ret0, _ := ret[0].(*clientv3.AuthRoleDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleDelete indicates an expected call of RoleDelete.
func (mr *MockAuthMockRecorder) RoleDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleDelete", reflect.TypeOf((*MockAuth)(nil).RoleDelete), arg0, arg1)
}

// RoleGet mocks base method.
func (m *MockAuth) RoleGet(arg0 context.Context, arg1 string) (*clientv3.AuthRoleGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleGet", arg0, arg1)
	ret0, _ := ret[0].(*clientv3.AuthRoleGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleGet indicates an expected call of RoleGet.
func (mr *MockAuthMockRecorder) RoleGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleGet", reflect.TypeOf((*MockAuth)(nil).RoleGet), arg0, arg1)
}

// RoleGrantPermission mocks base method.
func (m *MockAuth) RoleGrantPermission(arg0 context.Context, arg1, arg2, arg3 string, arg4 clientv3.PermissionType) (*clientv3.AuthRoleGrantPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleGrantPermission", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*clientv3.AuthRoleGrantPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleGrantPermission indicates an expected call of RoleGrantPermission.
func (mr *MockAuthMockRecorder) RoleGrantPermission(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleGrantPermission", reflect.TypeOf((*MockAuth)(nil).RoleGrantPermission), arg0, arg1, arg2, arg3, arg4)
}

// RoleList mocks base method.
func (m *MockAuth) RoleList(arg0 context.Context) (*clientv3.AuthRoleListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleList", arg0)
	ret0, _ := ret[0].(*clientv3.AuthRoleListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleList indicates an expected call of RoleList.
func (mr *MockAuthMockRecorder) RoleList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleList", reflect.TypeOf((*MockAuth)(nil).RoleList), arg0)
}

// RoleRevokePermission mocks base method.
func (m *MockAuth) RoleRevokePermission(arg0 context.Context, arg1, arg2, arg3 string) (*clientv3.AuthRoleRevokePermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleRevokePermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*clientv3.AuthRoleRevokePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RoleRevokePermission indicates an expected call of RoleRevokePermission.
func (mr *MockAuthMockRecorder) RoleRevokePermission(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleRevokePermission", reflect.TypeOf((*MockAuth)(nil).RoleRevokePermission), arg0, arg1, arg2, arg3)
}

// UserAdd mocks base method.
func (m *MockAuth) UserAdd(arg0 context.Context, arg1, arg2 string) (*clientv3.AuthUserAddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAdd", arg0, arg1, arg2)
	ret0, _ := ret[0].(*clientv3.AuthUserAddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAdd indicates an expected call of UserAdd.
func (mr *MockAuthMockRecorder) UserAdd(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAdd", reflect.TypeOf((*MockAuth)(nil).UserAdd), arg0, arg1, arg2)
}

// UserAddWithOptions mocks base method.
func (m *MockAuth) UserAddWithOptions(arg0 context.Context, arg1, arg2 string, arg3 *clientv3.UserAddOptions) (*clientv3.AuthUserAddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAddWithOptions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*clientv3.AuthUserAddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAddWithOptions indicates an expected call of UserAddWithOptions.
func (mr *MockAuthMockRecorder) UserAddWithOptions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAddWithOptions", reflect.TypeOf((*MockAuth)(nil).UserAddWithOptions), arg0, arg1, arg2, arg3)
}

// UserChangePassword mocks base method.
func (m *MockAuth) UserChangePassword(arg0 context.Context, arg1, arg2 string) (*clientv3.AuthUserChangePasswordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserChangePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(*clientv3.AuthUserChangePasswordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserChangePassword indicates an expected call of UserChangePassword.
func (mr *MockAuthMockRecorder) UserChangePassword(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChangePassword", reflect.TypeOf((*MockAuth)(nil).UserChangePassword), arg0, arg1, arg2)
}

// UserDelete mocks base method.
func (m *MockAuth) UserDelete(arg0 context.Context, arg1 string) (*clientv3.AuthUserDeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDelete", arg0, arg1)
	ret0, _ := ret[0].(*clientv3.AuthUserDeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDelete indicates an expected call of UserDelete.
func (mr *MockAuthMockRecorder) UserDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDelete", reflect.TypeOf((*MockAuth)(nil).UserDelete), arg0, arg1)
}

// UserGet mocks base method.
func (m *MockAuth) UserGet(arg0 context.Context, arg1 string) (*clientv3.AuthUserGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGet", arg0, arg1)
	ret0, _ := ret[0].(*clientv3.AuthUserGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGet indicates an expected call of UserGet.
func (mr *MockAuthMockRecorder) UserGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGet", reflect.TypeOf((*MockAuth)(nil).UserGet), arg0, arg1)
}

// UserGrantRole mocks base method.
func (m *MockAuth) UserGrantRole(arg0 context.Context, arg1, arg2 string) (*clientv3.AuthUserGrantRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGrantRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(*clientv3.AuthUserGrantRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGrantRole indicates an expected call of UserGrantRole.
func (mr *MockAuthMockRecorder) UserGrantRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGrantRole", reflect.TypeOf((*MockAuth)(nil).UserGrantRole), arg0, arg1, arg2)
}

// UserList mocks base method.
func (m *MockAuth) UserList(arg0 context.Context) (*clientv3.AuthUserListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserList", arg0)
	ret0, _ := ret[0].(*clientv3.AuthUserListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserList indicates an expected call of UserList.
func (mr *MockAuthMockRecorder) UserList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserList", reflect.TypeOf((*MockAuth)(nil).UserList), arg0)
}

// UserRevokeRole mocks base method.
func (m *MockAuth) UserRevokeRole(arg0 context.Context, arg1, arg2 string) (*clientv3.AuthUserRevokeRoleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRevokeRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(*clientv3.AuthUserRevokeRoleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRevokeRole indicates an expected call of UserRevokeRole.
func (mr *MockAuthMockRecorder) UserRevokeRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRevokeRole", reflect.TypeOf((*MockAuth)(nil).UserRevokeRole), arg0, arg1, arg2)
}
