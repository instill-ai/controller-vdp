// Code generated by MockGen. DO NOT EDIT.
// Source: go.etcd.io/etcd/client/v3 (interfaces: Maintenance)

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clientv3 "go.etcd.io/etcd/client/v3"
)

// MockMaintenance is a mock of Maintenance interface.
type MockMaintenance struct {
	ctrl     *gomock.Controller
	recorder *MockMaintenanceMockRecorder
}

// MockMaintenanceMockRecorder is the mock recorder for MockMaintenance.
type MockMaintenanceMockRecorder struct {
	mock *MockMaintenance
}

// NewMockMaintenance creates a new mock instance.
func NewMockMaintenance(ctrl *gomock.Controller) *MockMaintenance {
	mock := &MockMaintenance{ctrl: ctrl}
	mock.recorder = &MockMaintenanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMaintenance) EXPECT() *MockMaintenanceMockRecorder {
	return m.recorder
}

// AlarmDisarm mocks base method.
func (m *MockMaintenance) AlarmDisarm(arg0 context.Context, arg1 *clientv3.AlarmMember) (*clientv3.AlarmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlarmDisarm", arg0, arg1)
	ret0, _ := ret[0].(*clientv3.AlarmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlarmDisarm indicates an expected call of AlarmDisarm.
func (mr *MockMaintenanceMockRecorder) AlarmDisarm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlarmDisarm", reflect.TypeOf((*MockMaintenance)(nil).AlarmDisarm), arg0, arg1)
}

// AlarmList mocks base method.
func (m *MockMaintenance) AlarmList(arg0 context.Context) (*clientv3.AlarmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlarmList", arg0)
	ret0, _ := ret[0].(*clientv3.AlarmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AlarmList indicates an expected call of AlarmList.
func (mr *MockMaintenanceMockRecorder) AlarmList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlarmList", reflect.TypeOf((*MockMaintenance)(nil).AlarmList), arg0)
}

// Defragment mocks base method.
func (m *MockMaintenance) Defragment(arg0 context.Context, arg1 string) (*clientv3.DefragmentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Defragment", arg0, arg1)
	ret0, _ := ret[0].(*clientv3.DefragmentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Defragment indicates an expected call of Defragment.
func (mr *MockMaintenanceMockRecorder) Defragment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Defragment", reflect.TypeOf((*MockMaintenance)(nil).Defragment), arg0, arg1)
}

// HashKV mocks base method.
func (m *MockMaintenance) HashKV(arg0 context.Context, arg1 string, arg2 int64) (*clientv3.HashKVResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashKV", arg0, arg1, arg2)
	ret0, _ := ret[0].(*clientv3.HashKVResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashKV indicates an expected call of HashKV.
func (mr *MockMaintenanceMockRecorder) HashKV(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashKV", reflect.TypeOf((*MockMaintenance)(nil).HashKV), arg0, arg1, arg2)
}

// MoveLeader mocks base method.
func (m *MockMaintenance) MoveLeader(arg0 context.Context, arg1 uint64) (*clientv3.MoveLeaderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveLeader", arg0, arg1)
	ret0, _ := ret[0].(*clientv3.MoveLeaderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveLeader indicates an expected call of MoveLeader.
func (mr *MockMaintenanceMockRecorder) MoveLeader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveLeader", reflect.TypeOf((*MockMaintenance)(nil).MoveLeader), arg0, arg1)
}

// Snapshot mocks base method.
func (m *MockMaintenance) Snapshot(arg0 context.Context) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockMaintenanceMockRecorder) Snapshot(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockMaintenance)(nil).Snapshot), arg0)
}

// Status mocks base method.
func (m *MockMaintenance) Status(arg0 context.Context, arg1 string) (*clientv3.StatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*clientv3.StatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockMaintenanceMockRecorder) Status(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockMaintenance)(nil).Status), arg0, arg1)
}
