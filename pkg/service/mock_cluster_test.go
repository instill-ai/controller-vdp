// Code generated by MockGen. DO NOT EDIT.
// Source: go.etcd.io/etcd/client/v3 (interfaces: Cluster)

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clientv3 "go.etcd.io/etcd/client/v3"
)

// MockCluster is a mock of Cluster interface.
type MockCluster struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMockRecorder
}

// MockClusterMockRecorder is the mock recorder for MockCluster.
type MockClusterMockRecorder struct {
	mock *MockCluster
}

// NewMockCluster creates a new mock instance.
func NewMockCluster(ctrl *gomock.Controller) *MockCluster {
	mock := &MockCluster{ctrl: ctrl}
	mock.recorder = &MockClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCluster) EXPECT() *MockClusterMockRecorder {
	return m.recorder
}

// MemberAdd mocks base method.
func (m *MockCluster) MemberAdd(arg0 context.Context, arg1 []string) (*clientv3.MemberAddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberAdd", arg0, arg1)
	ret0, _ := ret[0].(*clientv3.MemberAddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberAdd indicates an expected call of MemberAdd.
func (mr *MockClusterMockRecorder) MemberAdd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberAdd", reflect.TypeOf((*MockCluster)(nil).MemberAdd), arg0, arg1)
}

// MemberAddAsLearner mocks base method.
func (m *MockCluster) MemberAddAsLearner(arg0 context.Context, arg1 []string) (*clientv3.MemberAddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberAddAsLearner", arg0, arg1)
	ret0, _ := ret[0].(*clientv3.MemberAddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberAddAsLearner indicates an expected call of MemberAddAsLearner.
func (mr *MockClusterMockRecorder) MemberAddAsLearner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberAddAsLearner", reflect.TypeOf((*MockCluster)(nil).MemberAddAsLearner), arg0, arg1)
}

// MemberList mocks base method.
func (m *MockCluster) MemberList(arg0 context.Context) (*clientv3.MemberListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberList", arg0)
	ret0, _ := ret[0].(*clientv3.MemberListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberList indicates an expected call of MemberList.
func (mr *MockClusterMockRecorder) MemberList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberList", reflect.TypeOf((*MockCluster)(nil).MemberList), arg0)
}

// MemberPromote mocks base method.
func (m *MockCluster) MemberPromote(arg0 context.Context, arg1 uint64) (*clientv3.MemberPromoteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberPromote", arg0, arg1)
	ret0, _ := ret[0].(*clientv3.MemberPromoteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberPromote indicates an expected call of MemberPromote.
func (mr *MockClusterMockRecorder) MemberPromote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberPromote", reflect.TypeOf((*MockCluster)(nil).MemberPromote), arg0, arg1)
}

// MemberRemove mocks base method.
func (m *MockCluster) MemberRemove(arg0 context.Context, arg1 uint64) (*clientv3.MemberRemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberRemove", arg0, arg1)
	ret0, _ := ret[0].(*clientv3.MemberRemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberRemove indicates an expected call of MemberRemove.
func (mr *MockClusterMockRecorder) MemberRemove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberRemove", reflect.TypeOf((*MockCluster)(nil).MemberRemove), arg0, arg1)
}

// MemberUpdate mocks base method.
func (m *MockCluster) MemberUpdate(arg0 context.Context, arg1 uint64, arg2 []string) (*clientv3.MemberUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*clientv3.MemberUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberUpdate indicates an expected call of MemberUpdate.
func (mr *MockClusterMockRecorder) MemberUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberUpdate", reflect.TypeOf((*MockCluster)(nil).MemberUpdate), arg0, arg1, arg2)
}
